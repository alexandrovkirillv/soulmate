name: Everything

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.planned_version.outputs.planned_version }}
      tag_hash: ${{ steps.lookup_tag.outputs.tag_hash }}
      can_create: ${{ steps.can_create.outputs.can_create }}
      tag_exists: ${{ steps.can_create.outputs.tag_exists }}
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}
      job_status: ${{ job.status }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get trigger branch name
        id: get_branch_name
        shell: bash
        run: |
          echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"

      - name: Check if .version file exists
        id: version_file_exists
        run: |
          if [[ -f .version ]]; then 
            echo "::set-output name=version_file_exists::true"
          else 
            echo "::set-output name=version_file_exists::false" 
          fi

      - name: Read out .version file
        if: steps.version_file_exists.outputs.version_file_exists == 'true'
        id: planned_version
        run: echo "::set-output name=planned_version::$(cat .version)"

      - name: Display planned version
        id: display_planned_version
        run: |
          echo "::debug::Planned version: ${{steps.planned_version.outputs.planned_version}}"

      - name: Lookup planned tag
        id: lookup_tag
        run: |
          URL="https://api.github.com/repos/${{github.repository}}/git/refs/tags/${{steps.planned_version.outputs.planned_version}}"
          OUTFILE=".tag_hash"
          curl -s -X GET -H 'authorization: Bearer ${{secrets.GITHUB_TOKEN}}' --url "${URL}" | jq .object.sha | tee "${OUTFILE}"
          echo "::set-output name=tag_hash::$(cat "${OUTFILE}")"
      
      - name: Define if can create a new version
        id: can_create
        if: steps.lookup_tag.outputs.tag_hash == 'null'
        run: |
          echo "::set-output name=tag_exists::false"
          echo "::set-output name=can_create::true"

  build_and_test:
    name: Build, Test
    runs-on: ubuntu-latest
    outputs:
      job_status: ${{ job.status }}

    needs: 
      - validate_new_version
    
    if: >
      needs.validate_new_version.outputs.branch_name != 'master' &&
      github.event_name == 'push'
    
    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Invoke Gradle build
        run: bash gradlew build -PbuildVersion="${{ steps.planned_version.outputs.planned_version }}"

      - name: List workdir contents
        id: list_workdir_contents
        run: |
          ls -laR .

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: "app-${{ steps.planned_version.outputs.planned_version }}.jar"
          path: "build/libs/secretnet-${{ steps.planned_version.outputs.planned_version }}.jar"
          retention-days: 90
